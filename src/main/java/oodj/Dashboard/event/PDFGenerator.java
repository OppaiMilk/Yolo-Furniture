package oodj.Dashboard.event;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.IOException;

public class PDFGenerator {

    public static void generateSaleReport(List<SaleRecord> saleRecords, String outputPath, String selectedMonth, String selectedYear, String staffRoles, String staffName) {
        try {
            Document document = new Document();
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(outputPath));
            document.open();

            // Create header table
            PdfPTable headerTable = new PdfPTable(2);
            headerTable.setWidthPercentage(100);

            // Logo cell
            String logoPath = "yoyoLogo.png";

            try {
                File logoFile = new File(logoPath);

                // Check if the file exists before reading it
                if (logoFile.exists()) {
                    Image profileImage = Image.getInstance(logoPath);
                    profileImage.scaleAbsolute(100, 100); // Adjust the size as needed

                    PdfPCell logoCell = new PdfPCell();
                    logoCell.addElement(profileImage);
                    logoCell.setBorder(0);
                    headerTable.addCell(logoCell);
                }
            } catch (IOException | BadElementException e) {
                e.printStackTrace(); // Handle the exception appropriately
            }


            // Company info cell
            PdfPCell companyCell = new PdfPCell();
            companyCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            companyCell.setBorder(0);

            // Add company name (bold, increased font size, center-aligned)
            Phrase companyName = new Phrase("YOYO Furniture Sdn Bhd", new Font(Font.FontFamily.HELVETICA, 25, Font.BOLD));
            Paragraph companyInfoParagraph = new Paragraph();
            companyInfoParagraph.add(companyName);
            companyInfoParagraph.add(new Paragraph("\n")); 
            // Add company address on the right side below the company name
            companyInfoParagraph.add(new Phrase("\nJalan Teknologi 5, Taman Teknologi Malaysia, 57000 Kuala Lumpur, Wilayah Persekutuan Kuala Lumpur"));

            PdfPCell companyInfoCell = new PdfPCell(companyInfoParagraph);
            companyInfoCell.setBorder(0);
            companyInfoCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // Set vertical alignment to center
            companyInfoCell.setPaddingBottom(30); // Add padding at the bottom
            companyInfoCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            companyInfoCell.setPaddingLeft(-150);
            companyInfoCell.setPaddingTop(20);
            headerTable.addCell(companyInfoCell);

            // Add header table to the document
            document.add(headerTable);

            // Draw a line below the header with increased width and distance
            PdfPTable lineTable = new PdfPTable(1);
            lineTable.setWidthPercentage(100); // Increase the width
            PdfPCell lineCell = new PdfPCell();
            lineCell.setBorder(PdfPCell.BOTTOM);
            lineCell.setPaddingTop(5); // Add padding at the top
            lineTable.addCell(lineCell);
            document.add(lineTable);
            
            //Add Who Generated and its Position
            Font largerFont = new Font(Font.FontFamily.HELVETICA, 13);
            document.add(new Phrase("\nRoles: " + staffRoles,largerFont));
            document.add(new Phrase("\nGenerated By: " + staffName,largerFont));
            
            // Add current date and time
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String formattedDate = dateFormat.format(new Date());
            document.add(new Phrase("\nGenerated On: " + formattedDate,largerFont));
            
            // Calculate the total sum of the "Total Price" column
            double totalSales = 0.0;
            for (SaleRecord record : saleRecords) {
                List<SaleRecord.Item> items = record.getItems();
                for (SaleRecord.Item item : items) {
                    totalSales += item.getTotalPrice();
                }
            }
            document.add(new Phrase("\nSales Total: RM " + totalSales,largerFont));

            // Add a title
            document.add(new Paragraph("\n"));
            Paragraph title = new Paragraph(selectedMonth + " " + selectedYear +" Approved Sale Order Report", new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD));
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);
            document.add(new Paragraph("\n"));

            // Add table header
            PdfPTable table = new PdfPTable(8);
            table.setWidthPercentage(100);

            String[] headers = {"Order ID", "Item ID", "Item Name", "Item Quantity", "Item Price",
                    "Total Price", "Date & Time", "Salesperson Name"};
            for (String header : headers) {
                PdfPCell pdfCell = new PdfPCell(new Phrase(header));
                pdfCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                pdfCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // Set vertical alignment to center
                pdfCell.setBackgroundColor(new BaseColor(44, 149, 219));
                table.addCell(pdfCell);
            }

            // Set fixed height for cells
            float rowHeight = 50f; 
            
            // Set column widths as a percentage of the table width
            float[] columnWidths = {10f, 8f, 15f, 8f, 8f, 8f, 12f, 12f};
            table.setWidths(columnWidths);
            
            // Add table content
            for (SaleRecord record : saleRecords) {
                List<SaleRecord.Item> items = record.getItems();

                for (int i = 0; i < Math.max(1, items.size()); i++) {
                    if (i == 0) {
                        PdfPCell orderIdCell = new PdfPCell(new Phrase(record.getOrderId()));
                        orderIdCell.setRowspan(items.size());
                        orderIdCell.setFixedHeight(rowHeight);
                        orderIdCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        orderIdCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(orderIdCell);
                    }

                    if (i < items.size()) {
                           SaleRecord.Item item = items.get(i);

                           PdfPCell itemIdCell = new PdfPCell(new Phrase(item.getItemId()));
                           itemIdCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                           itemIdCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                           itemIdCell.setFixedHeight(rowHeight);
                           table.addCell(itemIdCell);

                           PdfPCell itemNameCell = new PdfPCell(new Phrase(item.getItemName()));
                           itemNameCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                           itemNameCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                           itemNameCell.setFixedHeight(rowHeight);
                           table.addCell(itemNameCell);

                           PdfPCell itemQuantityCell = new PdfPCell(new Phrase(String.valueOf(item.getItemQuantity())));
                           itemQuantityCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                           itemQuantityCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                           itemQuantityCell.setFixedHeight(rowHeight);
                           table.addCell(itemQuantityCell);

                           PdfPCell itemPriceCell = new PdfPCell(new Phrase(String.valueOf(item.getItemPrice())));
                           itemPriceCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                           itemPriceCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                           itemPriceCell.setFixedHeight(rowHeight);
                           table.addCell(itemPriceCell);

                           PdfPCell totalPriceCell = new PdfPCell(new Phrase(String.valueOf(item.getTotalPrice())));
                           totalPriceCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                           totalPriceCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                           totalPriceCell.setFixedHeight(rowHeight);
                           table.addCell(totalPriceCell);
                       } else {
                           // Fill in empty cells for orders without items
                           for (int j = 0; j < 5; j++) {
                               PdfPCell emptyCell = new PdfPCell();
                               emptyCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                               emptyCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                               emptyCell.setFixedHeight(rowHeight);
                               table.addCell(emptyCell);
                           }
                       }

                    // Fill in the remaining columns for the first item
                    if (i == 0) {
                        PdfPCell dateTimeCell = new PdfPCell(new Phrase(record.getDateTime()));
                        dateTimeCell.setRowspan(items.size());
                        dateTimeCell.setFixedHeight(rowHeight);
                        dateTimeCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        dateTimeCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(dateTimeCell);

                        PdfPCell salespersonCell = new PdfPCell(new Phrase(record.getSalespersonName()));
                        salespersonCell.setRowspan(items.size());
                        salespersonCell.setFixedHeight(rowHeight);
                        salespersonCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        salespersonCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        table.addCell(salespersonCell);

//                        PdfPCell statusCell = new PdfPCell(new Phrase(record.getStatus()));
//                        statusCell.setRowspan(items.size());
//                        statusCell.setFixedHeight(rowHeight);
//                        statusCell.setHorizontalAlignment(Element.ALIGN_CENTER);
//                        statusCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
//                        table.addCell(statusCell);
                    }
                }
            }

            document.add(table);

            // Close the document
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
